// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as Constants$TetrisRescript from "../constants/Constants.bs.js";
import * as CoreLogic$TetrisRescript from "../core/CoreLogic.bs.js";
import * as CoreFigures$TetrisRescript from "../core/CoreFigures.bs.js";

function getRandomFigure(param) {
  return CoreFigures$TetrisRescript.Figure.make(Js_math.random_int(1, 8));
}

function getInitialState(param) {
  return {
          glass: Curry._1(CoreLogic$TetrisRescript.GameGlass.make, undefined),
          currentPosition: Constants$TetrisRescript.startPosition,
          currentFigure: getRandomFigure(undefined),
          nextFigure: getRandomFigure(undefined),
          mode: /* Idle */0,
          level: 1,
          score: 0
        };
}

function startGame(param) {
  var init = getInitialState(undefined);
  return {
          glass: init.glass,
          currentPosition: init.currentPosition,
          currentFigure: init.currentFigure,
          nextFigure: init.nextFigure,
          mode: /* Play */1,
          level: init.level,
          score: init.score
        };
}

function move(offset, state) {
  var nextPosition = CoreLogic$TetrisRescript.moveFigure(state.glass, state.currentFigure, state.currentPosition, offset);
  if (nextPosition !== undefined) {
    return {
            glass: state.glass,
            currentPosition: nextPosition,
            currentFigure: state.currentFigure,
            nextFigure: state.nextFigure,
            mode: state.mode,
            level: state.level,
            score: state.score
          };
  } else {
    return state;
  }
}

function moveLeft(param) {
  return move(Constants$TetrisRescript.leftOffset, param);
}

function moveRight(param) {
  return move(Constants$TetrisRescript.rightOffset, param);
}

function rotate(state) {
  var rotated = CoreLogic$TetrisRescript.rotateFigure(state.glass, state.currentFigure, state.currentPosition);
  if (rotated !== undefined) {
    return {
            glass: state.glass,
            currentPosition: state.currentPosition,
            currentFigure: rotated,
            nextFigure: state.nextFigure,
            mode: state.mode,
            level: state.level,
            score: state.score
          };
  } else {
    return state;
  }
}

function land(state, position) {
  var match = CoreLogic$TetrisRescript.landFigure(state.glass, state.currentFigure, position);
  var glass = match[1];
  var score = state.score + CoreLogic$TetrisRescript.scoreIncrement(match[0]) | 0;
  var level = CoreLogic$TetrisRescript.getLevel(score);
  if (!CoreLogic$TetrisRescript.canPlaceFigure(glass, state.nextFigure, Constants$TetrisRescript.startPosition)) {
    return {
            glass: glass,
            currentPosition: state.currentPosition,
            currentFigure: state.currentFigure,
            nextFigure: state.nextFigure,
            mode: /* GameOver */2,
            level: state.level,
            score: score
          };
  }
  var currentFigure = state.nextFigure;
  var nextFigure = getRandomFigure(undefined);
  return {
          glass: glass,
          currentPosition: Constants$TetrisRescript.startPosition,
          currentFigure: currentFigure,
          nextFigure: nextFigure,
          mode: state.mode,
          level: level,
          score: score
        };
}

function moveDown(glass, figure, position) {
  return CoreLogic$TetrisRescript.moveFigure(glass, figure, position, Constants$TetrisRescript.downOffset);
}

function tick(state) {
  var nextPosition = moveDown(state.glass, state.currentFigure, state.currentPosition);
  if (nextPosition !== undefined) {
    return {
            glass: state.glass,
            currentPosition: nextPosition,
            currentFigure: state.currentFigure,
            nextFigure: state.nextFigure,
            mode: state.mode,
            level: state.level,
            score: state.score
          };
  } else {
    return land(state, state.currentPosition);
  }
}

function drop(state) {
  var moveDownRec = function (_position) {
    while(true) {
      var position = _position;
      var nextPosition = moveDown(state.glass, state.currentFigure, position);
      if (nextPosition === undefined) {
        return position;
      }
      _position = nextPosition;
      continue ;
    };
  };
  return land(state, moveDownRec(state.currentPosition));
}

function id(a) {
  return a;
}

function reducer(state, action) {
  var match = state.mode;
  var tmp;
  if (match !== 1) {
    tmp = action !== 1 ? id : startGame;
  } else {
    switch (action) {
      case /* Tick */0 :
          tmp = tick;
          break;
      case /* Start */1 :
          tmp = id;
          break;
      case /* MoveLeft */2 :
          tmp = moveLeft;
          break;
      case /* MoveRight */3 :
          tmp = moveRight;
          break;
      case /* Rotate */4 :
          tmp = rotate;
          break;
      case /* Drop */5 :
          tmp = drop;
          break;
      
    }
  }
  return tmp(state);
}

export {
  getRandomFigure ,
  getInitialState ,
  startGame ,
  move ,
  moveLeft ,
  moveRight ,
  rotate ,
  land ,
  moveDown ,
  tick ,
  drop ,
  id ,
  reducer ,
  
}
/* CoreLogic-TetrisRescript Not a pure module */
