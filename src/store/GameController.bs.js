// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as CoreLogic$TetrisRescript from "../core/CoreLogic.bs.js";
import * as StoreContext$TetrisRescript from "./StoreContext.bs.js";

var addDocumentEventListener = ((event, handler) => document.addEventListener(event, handler));

var removeDocumentEventListener = ((event, handler) => document.removeEventListener(event, handler));

function useInterval(callback, timeout) {
  var savedCallback = React.useRef(callback);
  React.useEffect((function () {
          savedCallback.current = callback;
          
        }), [callback]);
  React.useEffect((function () {
          var timer = setInterval((function (param) {
                  return Curry._1(savedCallback.current, undefined);
                }), timeout);
          return (function (param) {
                    clearInterval(timer);
                    
                  });
        }), [timeout]);
  
}

function GameController(Props) {
  var match = React.useContext(StoreContext$TetrisRescript.context);
  var dispatch = match.dispatch;
  var state = match.state;
  var onKeyDown = React.useCallback((function (evt) {
          var key = evt.key;
          switch (key) {
            case "ArrowDown" :
                return Curry._1(dispatch, /* Drop */5);
            case "ArrowLeft" :
                return Curry._1(dispatch, /* MoveLeft */2);
            case "ArrowRight" :
                return Curry._1(dispatch, /* MoveRight */3);
            case "ArrowUp" :
                return Curry._1(dispatch, /* Rotate */4);
            default:
              return ;
          }
        }), [dispatch]);
  React.useEffect((function () {
          addDocumentEventListener("keydown", onKeyDown);
          return (function (param) {
                    return removeDocumentEventListener("keydown", onKeyDown);
                  });
        }), [onKeyDown]);
  var timeOut = React.useMemo((function () {
          return CoreLogic$TetrisRescript.getLevelTimeout(state.level);
        }), [state.level]);
  useInterval((function (param) {
          return Curry._1(dispatch, /* Tick */0);
        }), timeOut);
  return null;
}

var make = GameController;

export {
  addDocumentEventListener ,
  removeDocumentEventListener ,
  useInterval ,
  make ,
  
}
/* react Not a pure module */
