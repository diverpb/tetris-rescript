// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";

function commonStyle(param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8, param$9, param$10, param$11, param$12, param$13, param$14, param$15, param$16, param$17, param$18, param$19, param$20, param$21, param$22, param$23, param$24, param$25, param$26, param$27, param$28, param$29, param$30, param$31, param$32) {
  var partial_arg = "#eee";
  return function (param$33, param$34, param$35, param$36, param$37, param$38, param$39, param$40, param$41, param$42, param$43, param$44, param$45, param$46, param$47, param$48, param$49, param$50, param$51, param$52, param$53, param$54, param$55, param$56, param$57, param$58, param$59, param$60, param$61, param$62, param$63, param$64, param$65, param$66, param$67, param$68, param$69, param$70, param$71, param$72, param$73, param$74, param$75, param$76, param$77, param$78, param$79, param$80, param$81, param$82, param$83, param$84, param$85, param$86, param$87, param$88, param$89, param$90, param$91, param$92, param$93, param$94, param$95, param$96, param$97, param$98, param$99, param$100, param$101, param$102, param$103, param$104, param$105, param$106, param$107, param$108, param$109, param$110, param$111, param$112, param$113, param$114, param$115, param$116, param$117, param$118, param$119, param$120, param$121, param$122, param$123, param$124, param$125, param$126, param$127, param$128, param$129, param$130, param$131, param$132, param$133, param$134, param$135, param$136, param$137, param$138, param$139, param$140, param$141, param$142, param$143, param$144, param$145, param$146, param$147, param$148, param$149, param$150, param$151, param$152, param$153, param$154, param$155, param$156, param$157, param$158, param$159, param$160, param$161, param$162, param$163, param$164, param$165, param$166, param$167, param$168, param$169, param$170, param$171, param$172, param$173, param$174, param$175, param$176, param$177, param$178, param$179, param$180, param$181, param$182, param$183, param$184, param$185, param$186, param$187, param$188, param$189, param$190, param$191, param$192, param$193, param$194, param$195, param$196, param$197, param$198, param$199, param$200, param$201, param$202, param$203, param$204, param$205, param$206, param$207, param$208, param$209, param$210, param$211, param$212, param$213, param$214, param$215, param$216, param$217, param$218, param$219, param$220, param$221, param$222, param$223, param$224, param$225, param$226, param$227, param$228, param$229, param$230, param$231, param$232, param$233, param$234, param$235, param$236, param$237, param$238, param$239, param$240, param$241, param$242, param$243, param$244, param$245, param$246, param$247, param$248, param$249, param$250, param$251, param$252, param$253, param$254, param$255, param$256, param$257, param$258, param$259, param$260, param$261, param$262, param$263, param$264, param$265, param$266, param$267, param$268, param$269, param$270, param$271, param$272, param$273, param$274, param$275, param$276, param$277, param$278, param$279, param$280, param$281, param$282, param$283, param$284, param$285, param$286, param$287, param$288, param$289, param$290, param$291, param$292, param$293, param$294, param$295, param$296, param$297, param$298, param$299, param$300, param$301, param$302, param$303, param$304, param$305, param$306, param$307, param$308, param$309, param$310, param$311, param$312, param$313, param$314, param$315, param$316, param$317, param$318, param$319, param$320, param$321, param$322, param$323, param$324, param$325, param$326, param$327, param$328, param$329, param$330, param$331, param$332, param$333, param$334, param$335, param$336, param$337, param$338, param$339, param$340, param$341, param$342, param$343, param$344, param$345, param$346) {
    var tmp = {};
    if (param !== undefined) {
      tmp.azimuth = param;
    }
    if (param$1 !== undefined) {
      tmp.background = param$1;
    }
    if (param$2 !== undefined) {
      tmp.backgroundAttachment = param$2;
    }
    if (param$3 !== undefined) {
      tmp.backgroundColor = param$3;
    }
    if (param$4 !== undefined) {
      tmp.backgroundImage = param$4;
    }
    if (param$5 !== undefined) {
      tmp.backgroundPosition = param$5;
    }
    if (param$6 !== undefined) {
      tmp.backgroundRepeat = param$6;
    }
    if (param$7 !== undefined) {
      tmp.border = param$7;
    }
    if (param$8 !== undefined) {
      tmp.borderCollapse = param$8;
    }
    if (param$9 !== undefined) {
      tmp.borderColor = param$9;
    }
    if (param$10 !== undefined) {
      tmp.borderSpacing = param$10;
    }
    if (param$11 !== undefined) {
      tmp.borderStyle = param$11;
    }
    if (param$12 !== undefined) {
      tmp.borderTop = param$12;
    }
    if (param$13 !== undefined) {
      tmp.borderRight = param$13;
    }
    if (param$14 !== undefined) {
      tmp.borderBottom = param$14;
    }
    if (param$15 !== undefined) {
      tmp.borderLeft = param$15;
    }
    if (param$16 !== undefined) {
      tmp.borderTopColor = param$16;
    }
    if (param$17 !== undefined) {
      tmp.borderRightColor = param$17;
    }
    if (param$18 !== undefined) {
      tmp.borderBottomColor = param$18;
    }
    if (param$19 !== undefined) {
      tmp.borderLeftColor = param$19;
    }
    if (param$20 !== undefined) {
      tmp.borderTopStyle = param$20;
    }
    if (param$21 !== undefined) {
      tmp.borderRightStyle = param$21;
    }
    if (param$22 !== undefined) {
      tmp.borderBottomStyle = param$22;
    }
    if (param$23 !== undefined) {
      tmp.borderLeftStyle = param$23;
    }
    if (param$24 !== undefined) {
      tmp.borderTopWidth = param$24;
    }
    if (param$25 !== undefined) {
      tmp.borderRightWidth = param$25;
    }
    if (param$26 !== undefined) {
      tmp.borderBottomWidth = param$26;
    }
    if (param$27 !== undefined) {
      tmp.borderLeftWidth = param$27;
    }
    if (param$28 !== undefined) {
      tmp.borderWidth = param$28;
    }
    if (param$29 !== undefined) {
      tmp.bottom = param$29;
    }
    if (param$30 !== undefined) {
      tmp.captionSide = param$30;
    }
    if (param$31 !== undefined) {
      tmp.clear = param$31;
    }
    if (param$32 !== undefined) {
      tmp.clip = param$32;
    }
    if (partial_arg !== undefined) {
      tmp.color = partial_arg;
    }
    if (param$33 !== undefined) {
      tmp.content = param$33;
    }
    if (param$34 !== undefined) {
      tmp.counterIncrement = param$34;
    }
    if (param$35 !== undefined) {
      tmp.counterReset = param$35;
    }
    if (param$36 !== undefined) {
      tmp.cue = param$36;
    }
    if (param$37 !== undefined) {
      tmp.cueAfter = param$37;
    }
    if (param$38 !== undefined) {
      tmp.cueBefore = param$38;
    }
    if (param$39 !== undefined) {
      tmp.cursor = param$39;
    }
    if (param$40 !== undefined) {
      tmp.direction = param$40;
    }
    if (param$41 !== undefined) {
      tmp.display = param$41;
    }
    if (param$42 !== undefined) {
      tmp.elevation = param$42;
    }
    if (param$43 !== undefined) {
      tmp.emptyCells = param$43;
    }
    if (param$44 !== undefined) {
      tmp.float = param$44;
    }
    if (param$45 !== undefined) {
      tmp.font = param$45;
    }
    if (param$46 !== undefined) {
      tmp.fontFamily = param$46;
    }
    if (param$47 !== undefined) {
      tmp.fontSize = param$47;
    }
    if (param$48 !== undefined) {
      tmp.fontSizeAdjust = param$48;
    }
    if (param$49 !== undefined) {
      tmp.fontStretch = param$49;
    }
    if (param$50 !== undefined) {
      tmp.fontStyle = param$50;
    }
    if (param$51 !== undefined) {
      tmp.fontVariant = param$51;
    }
    if (param$52 !== undefined) {
      tmp.fontWeight = param$52;
    }
    if (param$53 !== undefined) {
      tmp.height = param$53;
    }
    if (param$54 !== undefined) {
      tmp.left = param$54;
    }
    if (param$55 !== undefined) {
      tmp.letterSpacing = param$55;
    }
    if (param$56 !== undefined) {
      tmp.lineHeight = param$56;
    }
    if (param$57 !== undefined) {
      tmp.listStyle = param$57;
    }
    if (param$58 !== undefined) {
      tmp.listStyleImage = param$58;
    }
    if (param$59 !== undefined) {
      tmp.listStylePosition = param$59;
    }
    if (param$60 !== undefined) {
      tmp.listStyleType = param$60;
    }
    if (param$61 !== undefined) {
      tmp.margin = param$61;
    }
    if (param$62 !== undefined) {
      tmp.marginTop = param$62;
    }
    if (param$63 !== undefined) {
      tmp.marginRight = param$63;
    }
    if (param$64 !== undefined) {
      tmp.marginBottom = param$64;
    }
    if (param$65 !== undefined) {
      tmp.marginLeft = param$65;
    }
    if (param$66 !== undefined) {
      tmp.markerOffset = param$66;
    }
    if (param$67 !== undefined) {
      tmp.marks = param$67;
    }
    if (param$68 !== undefined) {
      tmp.maxHeight = param$68;
    }
    if (param$69 !== undefined) {
      tmp.maxWidth = param$69;
    }
    if (param$70 !== undefined) {
      tmp.minHeight = param$70;
    }
    if (param$71 !== undefined) {
      tmp.minWidth = param$71;
    }
    if (param$72 !== undefined) {
      tmp.orphans = param$72;
    }
    if (param$73 !== undefined) {
      tmp.outline = param$73;
    }
    if (param$74 !== undefined) {
      tmp.outlineColor = param$74;
    }
    if (param$75 !== undefined) {
      tmp.outlineStyle = param$75;
    }
    if (param$76 !== undefined) {
      tmp.outlineWidth = param$76;
    }
    if (param$77 !== undefined) {
      tmp.overflow = param$77;
    }
    if (param$78 !== undefined) {
      tmp.overflowX = param$78;
    }
    if (param$79 !== undefined) {
      tmp.overflowY = param$79;
    }
    if (param$80 !== undefined) {
      tmp.padding = param$80;
    }
    if (param$81 !== undefined) {
      tmp.paddingTop = param$81;
    }
    if (param$82 !== undefined) {
      tmp.paddingRight = param$82;
    }
    if (param$83 !== undefined) {
      tmp.paddingBottom = param$83;
    }
    if (param$84 !== undefined) {
      tmp.paddingLeft = param$84;
    }
    if (param$85 !== undefined) {
      tmp.page = param$85;
    }
    if (param$86 !== undefined) {
      tmp.pageBreakAfter = param$86;
    }
    if (param$87 !== undefined) {
      tmp.pageBreakBefore = param$87;
    }
    if (param$88 !== undefined) {
      tmp.pageBreakInside = param$88;
    }
    if (param$89 !== undefined) {
      tmp.pause = param$89;
    }
    if (param$90 !== undefined) {
      tmp.pauseAfter = param$90;
    }
    if (param$91 !== undefined) {
      tmp.pauseBefore = param$91;
    }
    if (param$92 !== undefined) {
      tmp.pitch = param$92;
    }
    if (param$93 !== undefined) {
      tmp.pitchRange = param$93;
    }
    if (param$94 !== undefined) {
      tmp.playDuring = param$94;
    }
    if (param$95 !== undefined) {
      tmp.position = param$95;
    }
    if (param$96 !== undefined) {
      tmp.quotes = param$96;
    }
    if (param$97 !== undefined) {
      tmp.richness = param$97;
    }
    if (param$98 !== undefined) {
      tmp.right = param$98;
    }
    if (param$99 !== undefined) {
      tmp.size = param$99;
    }
    if (param$100 !== undefined) {
      tmp.speak = param$100;
    }
    if (param$101 !== undefined) {
      tmp.speakHeader = param$101;
    }
    if (param$102 !== undefined) {
      tmp.speakNumeral = param$102;
    }
    if (param$103 !== undefined) {
      tmp.speakPunctuation = param$103;
    }
    if (param$104 !== undefined) {
      tmp.speechRate = param$104;
    }
    if (param$105 !== undefined) {
      tmp.stress = param$105;
    }
    if (param$106 !== undefined) {
      tmp.tableLayout = param$106;
    }
    if (param$107 !== undefined) {
      tmp.textAlign = param$107;
    }
    if (param$108 !== undefined) {
      tmp.textDecoration = param$108;
    }
    if (param$109 !== undefined) {
      tmp.textIndent = param$109;
    }
    if (param$110 !== undefined) {
      tmp.textShadow = param$110;
    }
    if (param$111 !== undefined) {
      tmp.textTransform = param$111;
    }
    if (param$112 !== undefined) {
      tmp.top = param$112;
    }
    if (param$113 !== undefined) {
      tmp.unicodeBidi = param$113;
    }
    if (param$114 !== undefined) {
      tmp.verticalAlign = param$114;
    }
    if (param$115 !== undefined) {
      tmp.visibility = param$115;
    }
    if (param$116 !== undefined) {
      tmp.voiceFamily = param$116;
    }
    if (param$117 !== undefined) {
      tmp.volume = param$117;
    }
    if (param$118 !== undefined) {
      tmp.whiteSpace = param$118;
    }
    if (param$119 !== undefined) {
      tmp.widows = param$119;
    }
    if (param$120 !== undefined) {
      tmp.width = param$120;
    }
    if (param$121 !== undefined) {
      tmp.wordSpacing = param$121;
    }
    if (param$122 !== undefined) {
      tmp.zIndex = param$122;
    }
    if (param$123 !== undefined) {
      tmp.opacity = param$123;
    }
    if (param$124 !== undefined) {
      tmp.backgroundOrigin = param$124;
    }
    if (param$125 !== undefined) {
      tmp.backgroundSize = param$125;
    }
    if (param$126 !== undefined) {
      tmp.backgroundClip = param$126;
    }
    if (param$127 !== undefined) {
      tmp.borderRadius = param$127;
    }
    if (param$128 !== undefined) {
      tmp.borderTopLeftRadius = param$128;
    }
    if (param$129 !== undefined) {
      tmp.borderTopRightRadius = param$129;
    }
    if (param$130 !== undefined) {
      tmp.borderBottomLeftRadius = param$130;
    }
    if (param$131 !== undefined) {
      tmp.borderBottomRightRadius = param$131;
    }
    if (param$132 !== undefined) {
      tmp.borderImage = param$132;
    }
    if (param$133 !== undefined) {
      tmp.borderImageSource = param$133;
    }
    if (param$134 !== undefined) {
      tmp.borderImageSlice = param$134;
    }
    if (param$135 !== undefined) {
      tmp.borderImageWidth = param$135;
    }
    if (param$136 !== undefined) {
      tmp.borderImageOutset = param$136;
    }
    if (param$137 !== undefined) {
      tmp.borderImageRepeat = param$137;
    }
    if (param$138 !== undefined) {
      tmp.boxShadow = param$138;
    }
    if (param$139 !== undefined) {
      tmp.columns = param$139;
    }
    if (param$140 !== undefined) {
      tmp.columnCount = param$140;
    }
    if (param$141 !== undefined) {
      tmp.columnFill = param$141;
    }
    if (param$142 !== undefined) {
      tmp.columnGap = param$142;
    }
    if (param$143 !== undefined) {
      tmp.columnRule = param$143;
    }
    if (param$144 !== undefined) {
      tmp.columnRuleColor = param$144;
    }
    if (param$145 !== undefined) {
      tmp.columnRuleStyle = param$145;
    }
    if (param$146 !== undefined) {
      tmp.columnRuleWidth = param$146;
    }
    if (param$147 !== undefined) {
      tmp.columnSpan = param$147;
    }
    if (param$148 !== undefined) {
      tmp.columnWidth = param$148;
    }
    if (param$149 !== undefined) {
      tmp.breakAfter = param$149;
    }
    if (param$150 !== undefined) {
      tmp.breakBefore = param$150;
    }
    if (param$151 !== undefined) {
      tmp.breakInside = param$151;
    }
    if (param$152 !== undefined) {
      tmp.rest = param$152;
    }
    if (param$153 !== undefined) {
      tmp.restAfter = param$153;
    }
    if (param$154 !== undefined) {
      tmp.restBefore = param$154;
    }
    if (param$155 !== undefined) {
      tmp.speakAs = param$155;
    }
    if (param$156 !== undefined) {
      tmp.voiceBalance = param$156;
    }
    if (param$157 !== undefined) {
      tmp.voiceDuration = param$157;
    }
    if (param$158 !== undefined) {
      tmp.voicePitch = param$158;
    }
    if (param$159 !== undefined) {
      tmp.voiceRange = param$159;
    }
    if (param$160 !== undefined) {
      tmp.voiceRate = param$160;
    }
    if (param$161 !== undefined) {
      tmp.voiceStress = param$161;
    }
    if (param$162 !== undefined) {
      tmp.voiceVolume = param$162;
    }
    if (param$163 !== undefined) {
      tmp.objectFit = param$163;
    }
    if (param$164 !== undefined) {
      tmp.objectPosition = param$164;
    }
    if (param$165 !== undefined) {
      tmp.imageResolution = param$165;
    }
    if (param$166 !== undefined) {
      tmp.imageOrientation = param$166;
    }
    if (param$167 !== undefined) {
      tmp.alignContent = param$167;
    }
    if (param$168 !== undefined) {
      tmp.alignItems = param$168;
    }
    if (param$169 !== undefined) {
      tmp.alignSelf = param$169;
    }
    if (param$170 !== undefined) {
      tmp.flex = param$170;
    }
    if (param$171 !== undefined) {
      tmp.flexBasis = param$171;
    }
    if (param$172 !== undefined) {
      tmp.flexDirection = param$172;
    }
    if (param$173 !== undefined) {
      tmp.flexFlow = param$173;
    }
    if (param$174 !== undefined) {
      tmp.flexGrow = param$174;
    }
    if (param$175 !== undefined) {
      tmp.flexShrink = param$175;
    }
    if (param$176 !== undefined) {
      tmp.flexWrap = param$176;
    }
    if (param$177 !== undefined) {
      tmp.justifyContent = param$177;
    }
    if (param$178 !== undefined) {
      tmp.order = param$178;
    }
    if (param$179 !== undefined) {
      tmp.textDecorationColor = param$179;
    }
    if (param$180 !== undefined) {
      tmp.textDecorationLine = param$180;
    }
    if (param$181 !== undefined) {
      tmp.textDecorationSkip = param$181;
    }
    if (param$182 !== undefined) {
      tmp.textDecorationStyle = param$182;
    }
    if (param$183 !== undefined) {
      tmp.textEmphasis = param$183;
    }
    if (param$184 !== undefined) {
      tmp.textEmphasisColor = param$184;
    }
    if (param$185 !== undefined) {
      tmp.textEmphasisPosition = param$185;
    }
    if (param$186 !== undefined) {
      tmp.textEmphasisStyle = param$186;
    }
    if (param$187 !== undefined) {
      tmp.textUnderlinePosition = param$187;
    }
    if (param$188 !== undefined) {
      tmp.fontFeatureSettings = param$188;
    }
    if (param$189 !== undefined) {
      tmp.fontKerning = param$189;
    }
    if (param$190 !== undefined) {
      tmp.fontLanguageOverride = param$190;
    }
    if (param$191 !== undefined) {
      tmp.fontSynthesis = param$191;
    }
    if (param$192 !== undefined) {
      tmp.forntVariantAlternates = param$192;
    }
    if (param$193 !== undefined) {
      tmp.fontVariantCaps = param$193;
    }
    if (param$194 !== undefined) {
      tmp.fontVariantEastAsian = param$194;
    }
    if (param$195 !== undefined) {
      tmp.fontVariantLigatures = param$195;
    }
    if (param$196 !== undefined) {
      tmp.fontVariantNumeric = param$196;
    }
    if (param$197 !== undefined) {
      tmp.fontVariantPosition = param$197;
    }
    if (param$198 !== undefined) {
      tmp.all = param$198;
    }
    if (param$199 !== undefined) {
      tmp.glyphOrientationVertical = param$199;
    }
    if (param$200 !== undefined) {
      tmp.textCombineUpright = param$200;
    }
    if (param$201 !== undefined) {
      tmp.textOrientation = param$201;
    }
    if (param$202 !== undefined) {
      tmp.writingMode = param$202;
    }
    if (param$203 !== undefined) {
      tmp.shapeImageThreshold = param$203;
    }
    if (param$204 !== undefined) {
      tmp.shapeMargin = param$204;
    }
    if (param$205 !== undefined) {
      tmp.shapeOutside = param$205;
    }
    if (param$206 !== undefined) {
      tmp.clipPath = param$206;
    }
    if (param$207 !== undefined) {
      tmp.clipRule = param$207;
    }
    if (param$208 !== undefined) {
      tmp.mask = param$208;
    }
    if (param$209 !== undefined) {
      tmp.maskBorder = param$209;
    }
    if (param$210 !== undefined) {
      tmp.maskBorderMode = param$210;
    }
    if (param$211 !== undefined) {
      tmp.maskBorderOutset = param$211;
    }
    if (param$212 !== undefined) {
      tmp.maskBorderRepeat = param$212;
    }
    if (param$213 !== undefined) {
      tmp.maskBorderSlice = param$213;
    }
    if (param$214 !== undefined) {
      tmp.maskBorderSource = param$214;
    }
    if (param$215 !== undefined) {
      tmp.maskBorderWidth = param$215;
    }
    if (param$216 !== undefined) {
      tmp.maskClip = param$216;
    }
    if (param$217 !== undefined) {
      tmp.maskComposite = param$217;
    }
    if (param$218 !== undefined) {
      tmp.maskImage = param$218;
    }
    if (param$219 !== undefined) {
      tmp.maskMode = param$219;
    }
    if (param$220 !== undefined) {
      tmp.maskOrigin = param$220;
    }
    if (param$221 !== undefined) {
      tmp.maskPosition = param$221;
    }
    if (param$222 !== undefined) {
      tmp.maskRepeat = param$222;
    }
    if (param$223 !== undefined) {
      tmp.maskSize = param$223;
    }
    if (param$224 !== undefined) {
      tmp.maskType = param$224;
    }
    if (param$225 !== undefined) {
      tmp.backgroundBlendMode = param$225;
    }
    if (param$226 !== undefined) {
      tmp.isolation = param$226;
    }
    if (param$227 !== undefined) {
      tmp.mixBlendMode = param$227;
    }
    if (param$228 !== undefined) {
      tmp.boxDecorationBreak = param$228;
    }
    if (param$229 !== undefined) {
      tmp.boxSizing = param$229;
    }
    if (param$230 !== undefined) {
      tmp.caretColor = param$230;
    }
    if (param$231 !== undefined) {
      tmp.navDown = param$231;
    }
    if (param$232 !== undefined) {
      tmp.navLeft = param$232;
    }
    if (param$233 !== undefined) {
      tmp.navRight = param$233;
    }
    if (param$234 !== undefined) {
      tmp.navUp = param$234;
    }
    if (param$235 !== undefined) {
      tmp.outlineOffset = param$235;
    }
    if (param$236 !== undefined) {
      tmp.resize = param$236;
    }
    if (param$237 !== undefined) {
      tmp.textOverflow = param$237;
    }
    if (param$238 !== undefined) {
      tmp.grid = param$238;
    }
    if (param$239 !== undefined) {
      tmp.gridArea = param$239;
    }
    if (param$240 !== undefined) {
      tmp.gridAutoColumns = param$240;
    }
    if (param$241 !== undefined) {
      tmp.gridAutoFlow = param$241;
    }
    if (param$242 !== undefined) {
      tmp.gridAutoRows = param$242;
    }
    if (param$243 !== undefined) {
      tmp.gridColumn = param$243;
    }
    if (param$244 !== undefined) {
      tmp.gridColumnEnd = param$244;
    }
    if (param$245 !== undefined) {
      tmp.gridColumnGap = param$245;
    }
    if (param$246 !== undefined) {
      tmp.gridColumnStart = param$246;
    }
    if (param$247 !== undefined) {
      tmp.gridGap = param$247;
    }
    if (param$248 !== undefined) {
      tmp.gridRow = param$248;
    }
    if (param$249 !== undefined) {
      tmp.gridRowEnd = param$249;
    }
    if (param$250 !== undefined) {
      tmp.gridRowGap = param$250;
    }
    if (param$251 !== undefined) {
      tmp.gridRowStart = param$251;
    }
    if (param$252 !== undefined) {
      tmp.gridTemplate = param$252;
    }
    if (param$253 !== undefined) {
      tmp.gridTemplateAreas = param$253;
    }
    if (param$254 !== undefined) {
      tmp.gridTemplateColumns = param$254;
    }
    if (param$255 !== undefined) {
      tmp.gridTemplateRows = param$255;
    }
    if (param$256 !== undefined) {
      tmp.willChange = param$256;
    }
    if (param$257 !== undefined) {
      tmp.hangingPunctuation = param$257;
    }
    if (param$258 !== undefined) {
      tmp.hyphens = param$258;
    }
    if (param$259 !== undefined) {
      tmp.lineBreak = param$259;
    }
    if (param$260 !== undefined) {
      tmp.overflowWrap = param$260;
    }
    if (param$261 !== undefined) {
      tmp.tabSize = param$261;
    }
    if (param$262 !== undefined) {
      tmp.textAlignLast = param$262;
    }
    if (param$263 !== undefined) {
      tmp.textJustify = param$263;
    }
    if (param$264 !== undefined) {
      tmp.wordBreak = param$264;
    }
    if (param$265 !== undefined) {
      tmp.wordWrap = param$265;
    }
    if (param$266 !== undefined) {
      tmp.animation = param$266;
    }
    if (param$267 !== undefined) {
      tmp.animationDelay = param$267;
    }
    if (param$268 !== undefined) {
      tmp.animationDirection = param$268;
    }
    if (param$269 !== undefined) {
      tmp.animationDuration = param$269;
    }
    if (param$270 !== undefined) {
      tmp.animationFillMode = param$270;
    }
    if (param$271 !== undefined) {
      tmp.animationIterationCount = param$271;
    }
    if (param$272 !== undefined) {
      tmp.animationName = param$272;
    }
    if (param$273 !== undefined) {
      tmp.animationPlayState = param$273;
    }
    if (param$274 !== undefined) {
      tmp.animationTimingFunction = param$274;
    }
    if (param$275 !== undefined) {
      tmp.transition = param$275;
    }
    if (param$276 !== undefined) {
      tmp.transitionDelay = param$276;
    }
    if (param$277 !== undefined) {
      tmp.transitionDuration = param$277;
    }
    if (param$278 !== undefined) {
      tmp.transitionProperty = param$278;
    }
    if (param$279 !== undefined) {
      tmp.transitionTimingFunction = param$279;
    }
    if (param$280 !== undefined) {
      tmp.backfaceVisibility = param$280;
    }
    if (param$281 !== undefined) {
      tmp.perspective = param$281;
    }
    if (param$282 !== undefined) {
      tmp.perspectiveOrigin = param$282;
    }
    if (param$283 !== undefined) {
      tmp.transform = param$283;
    }
    if (param$284 !== undefined) {
      tmp.transformOrigin = param$284;
    }
    if (param$285 !== undefined) {
      tmp.transformStyle = param$285;
    }
    if (param$286 !== undefined) {
      tmp.justifyItems = param$286;
    }
    if (param$287 !== undefined) {
      tmp.justifySelf = param$287;
    }
    if (param$288 !== undefined) {
      tmp.placeContent = param$288;
    }
    if (param$289 !== undefined) {
      tmp.placeItems = param$289;
    }
    if (param$290 !== undefined) {
      tmp.placeSelf = param$290;
    }
    if (param$291 !== undefined) {
      tmp.appearance = param$291;
    }
    if (param$292 !== undefined) {
      tmp.caret = param$292;
    }
    if (param$293 !== undefined) {
      tmp.caretAnimation = param$293;
    }
    if (param$294 !== undefined) {
      tmp.caretShape = param$294;
    }
    if (param$295 !== undefined) {
      tmp.userSelect = param$295;
    }
    if (param$296 !== undefined) {
      tmp.maxLines = param$296;
    }
    if (param$297 !== undefined) {
      tmp.marqueeDirection = param$297;
    }
    if (param$298 !== undefined) {
      tmp.marqueeLoop = param$298;
    }
    if (param$299 !== undefined) {
      tmp.marqueeSpeed = param$299;
    }
    if (param$300 !== undefined) {
      tmp.marqueeStyle = param$300;
    }
    if (param$301 !== undefined) {
      tmp.overflowStyle = param$301;
    }
    if (param$302 !== undefined) {
      tmp.rotation = param$302;
    }
    if (param$303 !== undefined) {
      tmp.rotationPoint = param$303;
    }
    if (param$304 !== undefined) {
      tmp.alignmentBaseline = param$304;
    }
    if (param$305 !== undefined) {
      tmp.baselineShift = param$305;
    }
    if (param$306 !== undefined) {
      tmp.clip = param$306;
    }
    if (param$307 !== undefined) {
      tmp.clipPath = param$307;
    }
    if (param$308 !== undefined) {
      tmp.clipRule = param$308;
    }
    if (param$309 !== undefined) {
      tmp.colorInterpolation = param$309;
    }
    if (param$310 !== undefined) {
      tmp.colorInterpolationFilters = param$310;
    }
    if (param$311 !== undefined) {
      tmp.colorProfile = param$311;
    }
    if (param$312 !== undefined) {
      tmp.colorRendering = param$312;
    }
    if (param$313 !== undefined) {
      tmp.cursor = param$313;
    }
    if (param$314 !== undefined) {
      tmp.dominantBaseline = param$314;
    }
    if (param$315 !== undefined) {
      tmp.fill = param$315;
    }
    if (param$316 !== undefined) {
      tmp.fillOpacity = param$316;
    }
    if (param$317 !== undefined) {
      tmp.fillRule = param$317;
    }
    if (param$318 !== undefined) {
      tmp.filter = param$318;
    }
    if (param$319 !== undefined) {
      tmp.floodColor = param$319;
    }
    if (param$320 !== undefined) {
      tmp.floodOpacity = param$320;
    }
    if (param$321 !== undefined) {
      tmp.glyphOrientationHorizontal = param$321;
    }
    if (param$322 !== undefined) {
      tmp.glyphOrientationVertical = param$322;
    }
    if (param$323 !== undefined) {
      tmp.imageRendering = param$323;
    }
    if (param$324 !== undefined) {
      tmp.kerning = param$324;
    }
    if (param$325 !== undefined) {
      tmp.lightingColor = param$325;
    }
    if (param$326 !== undefined) {
      tmp.markerEnd = param$326;
    }
    if (param$327 !== undefined) {
      tmp.markerMid = param$327;
    }
    if (param$328 !== undefined) {
      tmp.markerStart = param$328;
    }
    if (param$329 !== undefined) {
      tmp.pointerEvents = param$329;
    }
    if (param$330 !== undefined) {
      tmp.shapeRendering = param$330;
    }
    if (param$331 !== undefined) {
      tmp.stopColor = param$331;
    }
    if (param$332 !== undefined) {
      tmp.stopOpacity = param$332;
    }
    if (param$333 !== undefined) {
      tmp.stroke = param$333;
    }
    if (param$334 !== undefined) {
      tmp.strokeDasharray = param$334;
    }
    if (param$335 !== undefined) {
      tmp.strokeDashoffset = param$335;
    }
    if (param$336 !== undefined) {
      tmp.strokeLinecap = param$336;
    }
    if (param$337 !== undefined) {
      tmp.strokeLinejoin = param$337;
    }
    if (param$338 !== undefined) {
      tmp.strokeMiterlimit = param$338;
    }
    if (param$339 !== undefined) {
      tmp.strokeOpacity = param$339;
    }
    if (param$340 !== undefined) {
      tmp.strokeWidth = param$340;
    }
    if (param$341 !== undefined) {
      tmp.textAnchor = param$341;
    }
    if (param$342 !== undefined) {
      tmp.textRendering = param$342;
    }
    if (param$343 !== undefined) {
      tmp.rubyAlign = param$343;
    }
    if (param$344 !== undefined) {
      tmp.rubyMerge = param$344;
    }
    if (param$345 !== undefined) {
      tmp.rubyPosition = param$345;
    }
    return tmp;
  };
}

var regular = commonStyle(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "1.2rem", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "1rem", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);

var title = commonStyle(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "2rem", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, "1rem", undefined, "2rem", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);

function $$Text(Props) {
  var children = Props.children;
  var sizeOpt = Props.size;
  var size = sizeOpt !== undefined ? sizeOpt : /* Regular */1;
  var style = size ? regular : title;
  return React.createElement("div", {
              style: style
            }, children);
}

var make = $$Text;

export {
  commonStyle ,
  regular ,
  title ,
  make ,
  
}
/* regular Not a pure module */
