// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Text$TetrisRescript from "../Common/Text.bs.js";
import * as Button$TetrisRescript from "../Common/Button.bs.js";
import * as CoreGlass$TetrisRescript from "../../core/CoreGlass.bs.js";
import * as GlassGrid$TetrisRescript from "../Common/GlassGrid.bs.js";
import * as CoreFigures$TetrisRescript from "../../core/CoreFigures.bs.js";
import * as StoreContext$TetrisRescript from "../../store/StoreContext.bs.js";

var leftColumnStyle = {
  display: "flex",
  width: "100%",
  alignItems: "center",
  flexDirection: "column"
};

function GameInfo$GameOverInfo(Props) {
  var totalScore = Props.totalScore;
  var restart = Props.restart;
  return React.createElement(React.Fragment, undefined, React.createElement(Text$TetrisRescript.make, {
                  children: "Game over!",
                  size: /* Title */0
                }), React.createElement(Text$TetrisRescript.make, {
                  children: "Your final score: " + String(totalScore)
                }), React.createElement("br", undefined), React.createElement(Button$TetrisRescript.make, {
                  children: "Restart",
                  onClick: restart
                }));
}

var GameOverInfo = {
  make: GameInfo$GameOverInfo
};

function GameInfo$IdleInfo(Props) {
  var start = Props.start;
  return React.createElement(React.Fragment, undefined, React.createElement(Text$TetrisRescript.make, {
                  children: "Wanna play?"
                }), React.createElement(Button$TetrisRescript.make, {
                  children: "Lets goooo!",
                  onClick: start
                }));
}

var IdleInfo = {
  make: GameInfo$IdleInfo
};

var NextGlassConfig = {
  width: 5,
  height: 2
};

var NextGlass = CoreGlass$TetrisRescript.Glass({
      height: 2,
      width: 5
    });

function GameInfo$PlayInfo(Props) {
  var level = Props.level;
  var score = Props.score;
  var nextFigure = Props.nextFigure;
  var cells = CoreFigures$TetrisRescript.Figure.getCellCoords(nextFigure, [
        2,
        1
      ]);
  var glass = Curry._1(NextGlass.toArray, Curry._3(NextGlass.mergeToGlass, Curry._1(NextGlass.make, undefined), cells, /* Filled */{
            _0: nextFigure.color
          }));
  return React.createElement(React.Fragment, undefined, React.createElement(Text$TetrisRescript.make, {
                  children: "Next Figure:"
                }), React.createElement(GlassGrid$TetrisRescript.make, {
                  glass: glass
                }), React.createElement("br", undefined), React.createElement(Text$TetrisRescript.make, {
                  children: "Level: " + String(level)
                }), React.createElement(Text$TetrisRescript.make, {
                  children: "Score: " + String(score)
                }));
}

var PlayInfo = {
  NextGlassConfig: NextGlassConfig,
  NextGlass: NextGlass,
  make: GameInfo$PlayInfo
};

function GameInfo(Props) {
  var match = React.useContext(StoreContext$TetrisRescript.context);
  var dispatch = match.dispatch;
  var state = match.state;
  var match$1 = state.mode;
  var tmp;
  switch (match$1) {
    case /* Idle */0 :
        tmp = React.createElement(GameInfo$IdleInfo, {
              start: (function (param) {
                  return Curry._1(dispatch, /* Start */1);
                })
            });
        break;
    case /* Play */1 :
        tmp = React.createElement(GameInfo$PlayInfo, {
              level: state.level,
              score: state.score,
              nextFigure: state.nextFigure
            });
        break;
    case /* GameOver */2 :
        tmp = React.createElement(GameInfo$GameOverInfo, {
              totalScore: state.score,
              restart: (function (param) {
                  return Curry._1(dispatch, /* Start */1);
                })
            });
        break;
    
  }
  return React.createElement("div", {
              style: leftColumnStyle
            }, tmp);
}

var make = GameInfo;

export {
  leftColumnStyle ,
  GameOverInfo ,
  IdleInfo ,
  PlayInfo ,
  make ,
  
}
/* NextGlass Not a pure module */
