// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";

function parseFigure(arr) {
  return Belt_List.toArray(Belt_List.map(Belt_List.keep(Belt_Array.reduceWithIndex(arr, /* [] */0, (function (acc, arr, y) {
                            var ls = Belt_Array.reduceWithIndex(arr, /* [] */0, (function (acc, elem, x) {
                                    return Belt_List.add(acc, [
                                                elem,
                                                [
                                                  x,
                                                  y
                                                ]
                                              ]);
                                  }));
                            return Belt_List.concat(acc, ls);
                          })), (function (i) {
                        return i[0] === 1;
                      })), (function (param) {
                    var match = param[1];
                    return [
                            match[0] - 1 | 0,
                            match[1] - 1 | 0
                          ];
                  })));
}

var figure1 = parseFigure([
      [
        0,
        1,
        0
      ],
      [
        1,
        1,
        1
      ]
    ]);

var figure2 = parseFigure([
      [
        0,
        1,
        1
      ],
      [
        1,
        1,
        0
      ]
    ]);

var figure3 = parseFigure([
      [
        1,
        1,
        0
      ],
      [
        0,
        1,
        1
      ]
    ]);

var figure4 = parseFigure([
      [
        1,
        1
      ],
      [
        1,
        1
      ]
    ]);

var figure5 = parseFigure([
      [
        0,
        0,
        0,
        0
      ],
      [
        1,
        1,
        1,
        1
      ]
    ]);

var figure6 = parseFigure([
      [
        1,
        0,
        0
      ],
      [
        1,
        1,
        1
      ]
    ]);

var figure7 = parseFigure([
      [
        0,
        0,
        1
      ],
      [
        1,
        1,
        1
      ]
    ]);

function make(num) {
  var match;
  switch (num) {
    case 1 :
        match = [
          /* Red */1,
          figure1
        ];
        break;
    case 2 :
        match = [
          /* Green */2,
          figure2
        ];
        break;
    case 3 :
        match = [
          /* Blue */3,
          figure3
        ];
        break;
    case 4 :
        match = [
          /* Yellow */4,
          figure4
        ];
        break;
    case 5 :
        match = [
          /* Cyan */5,
          figure5
        ];
        break;
    case 6 :
        match = [
          /* Magenta */6,
          figure6
        ];
        break;
    default:
      match = [
        /* Orange */7,
        figure7
      ];
  }
  return {
          color: match[0],
          cells: match[1]
        };
}

function rotate90(param) {
  return [
          -param[1] | 0,
          param[0]
        ];
}

function rotate(figure) {
  return {
          color: figure.color,
          cells: Belt_Array.map(figure.cells, rotate90)
        };
}

function getCellCoords(figure, position) {
  var py = position[1];
  var px = position[0];
  return Belt_Array.map(figure.cells, (function (param) {
                return [
                        param[0] + px | 0,
                        param[1] + py | 0
                      ];
              }));
}

var Figure = {
  make: make,
  rotate90: rotate90,
  rotate: rotate,
  getCellCoords: getCellCoords
};

export {
  parseFigure ,
  figure1 ,
  figure2 ,
  figure3 ,
  figure4 ,
  figure5 ,
  figure6 ,
  figure7 ,
  Figure ,
  
}
/* figure1 Not a pure module */
