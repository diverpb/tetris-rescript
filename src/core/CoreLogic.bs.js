// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as CoreGlass$TetrisRescript from "./CoreGlass.bs.js";
import * as CoreFigures$TetrisRescript from "./CoreFigures.bs.js";

var GameGlassConfig = {
  width: 10,
  height: 20
};

var GameGlass = CoreGlass$TetrisRescript.Glass({
      height: 20,
      width: 10
    });

function mergeFigure(glass, figure, position) {
  var cells = CoreFigures$TetrisRescript.Figure.getCellCoords(figure, position);
  return Curry._3(GameGlass.mergeToGlass, glass, cells, /* Filled */{
              _0: figure.color
            });
}

function canPlaceFigure(glass, figure, position) {
  var __x = CoreFigures$TetrisRescript.Figure.getCellCoords(figure, position);
  return Curry._2(GameGlass.canMergeToGlass, glass, __x);
}

function movePostion(param, param$1) {
  return [
          param[0] + param$1[0] | 0,
          param[1] + param$1[1] | 0
        ];
}

function moveFigure(glass, figure, position, offset) {
  var nextPosition = movePostion(position, offset);
  if (canPlaceFigure(glass, figure, nextPosition)) {
    return nextPosition;
  }
  
}

function rotateFigure(glass, figure, position) {
  var rotated = CoreFigures$TetrisRescript.Figure.rotate(figure);
  if (canPlaceFigure(glass, rotated, position)) {
    return rotated;
  }
  
}

function landFigure(glass, figure, position) {
  return Curry._1(GameGlass.removeFilledLines, mergeFigure(glass, figure, position));
}

function scoreIncrement(removedLines) {
  switch (removedLines) {
    case 1 :
        return 100;
    case 2 :
        return 400;
    case 3 :
        return 700;
    case 4 :
        return 1000;
    default:
      return 0;
  }
}

function getLevel(score) {
  return Math.min((score / 1000 | 0) + 1 | 0, 10);
}

function getLevelTimeout(level) {
  var maxTimeoutLog = Math.log(1000);
  var minTimeoutLog = Math.log(100);
  var scale = (maxTimeoutLog - minTimeoutLog) / (10 - 1);
  return Math.exp(maxTimeoutLog - scale * (level - 1)) | 0;
}

var maxLevel = 10;

var maxTimeout = 1000;

var minTimeout = 100;

var Figure;

export {
  maxLevel ,
  maxTimeout ,
  minTimeout ,
  GameGlassConfig ,
  GameGlass ,
  Figure ,
  mergeFigure ,
  canPlaceFigure ,
  movePostion ,
  moveFigure ,
  rotateFigure ,
  landFigure ,
  scoreIncrement ,
  getLevel ,
  getLevelTimeout ,
  
}
/* GameGlass Not a pure module */
