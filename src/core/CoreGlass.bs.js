// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as CoreCell$TetrisRescript from "./CoreCell.bs.js";

function Glass(Config) {
  var makeLine = function (param) {
    return Belt_Array.makeBy(Config.width, CoreCell$TetrisRescript.empty);
  };
  var make = function (param) {
    return Belt_Array.makeBy(Config.height, makeLine);
  };
  var toArray = function (glass) {
    return glass;
  };
  var removeFilledLines = function (prevGlass) {
    var hasEmpty = function (line) {
      return Belt_Array.some(line, CoreCell$TetrisRescript.isEmpty);
    };
    var glass = Belt_Array.keep(prevGlass, hasEmpty);
    var removedLines = Config.height - glass.length | 0;
    return [
            removedLines,
            Belt_Array.concat(Belt_Array.makeBy(removedLines, makeLine), glass)
          ];
  };
  var canMergeToGlass = function (glass, cells) {
    return Belt_Array.every(Belt_Array.map(cells, (function (param) {
                      var column = Belt_Array.get(glass, param[1]);
                      if (column !== undefined) {
                        return Belt_Array.get(column, param[0]);
                      }
                      
                    })), (function (elem) {
                  if (elem !== undefined) {
                    return CoreCell$TetrisRescript.isEmpty(elem);
                  } else {
                    return false;
                  }
                }));
  };
  var mergeToGlass = function (glass, cells, elem) {
    var newGlass = Belt_Array.map(glass, (function (prim) {
            return prim.slice(0);
          }));
    Belt_Array.forEach(cells, (function (param) {
            var x = param[0];
            var y = param[1];
            var column = Belt_Array.get(newGlass, y);
            if (column !== undefined) {
              Belt_Array.set(column, x, elem);
              return ;
            }
            
          }));
    return newGlass;
  };
  return {
          make: make,
          toArray: toArray,
          removeFilledLines: removeFilledLines,
          canMergeToGlass: canMergeToGlass,
          mergeToGlass: mergeToGlass
        };
}

export {
  Glass ,
  
}
/* No side effect */
